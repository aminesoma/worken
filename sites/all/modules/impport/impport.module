<?php
/**
 * Implements hook_permission()
 */
function impport_permission() {
  return array(
    'administer uploader' => array(
      'title' => t('Administer Uploader'),
      'description' => t('Allow the following roles to upload csv files to the server.'),
    ),
  );
}
 
/**
 * Implements hook_menu()
 */
function impport_menu() {
  $items['file-uploader'] = array(
    'title' => 'Upload a File',
    'type' => MENU_CALLBACK,
    'description' => 'Import a csv',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('impport_import_form'),
    'access arguments' => array('administer uploader'),
  );
  return $items;
}



/**
 * Builds a form that will allow users to upload csv files
 * 
 * @see
 *   hook_menu()
 */
function impport_import_form($form, $form_state) {
  $form['notes'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="import-notes">A few notes when uploading. <ul><li>Make sure the file is in a .csv format.</li><li>Columns should be in *this* order</li><li>Be sure to click the "Upload" button when you select a csv.</li></ul></div>',
    '#upload_location' => 'public://tmp/',
  );
  $form['import'] = array(
    '#title' => t('Import'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded csv will be imported and temporarily saved.'),
    '#upload_location' => 'public://tmp/',
    '#upload_validators' => array(
      'file_validate_extensions' => array('csv'),
    ),
  );
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}





/**
 * Submit handler for module_name_import_form()
 */
function impport_import_form_submit($form, $form_state) {
  // Check to make sure that the file was uploaded to the server properly
  $uri = db_query("SELECT uri FROM {file_managed} WHERE fid = :fid", array(
    ':fid' => $form_state['input']['import']['fid'],
  ))->fetchField();
  if(!empty($uri)) {
    if(file_exists(drupal_realpath($uri))) { 
      // Open the csv
      $handle = fopen(drupal_realpath($uri), "r");
      // Go through each row in the csv and run a function on it. In this case we are parsing by '|' (pipe) characters.
      // If you want commas are any other character, replace the pipe with it.
      while (($data = fgetcsv($handle, 0, ',', '"')) !== FALSE) {
        $operations[] = array(
          'impport_import_batch_processing',  // The function to run on each row
          array($data),  // The row in the csv
        );
      }
 
      // Once everything is gathered and ready to be processed... well... process it!
      $batch = array(
        'title' => t('Importing CSV...'),
        'operations' => $operations,  // Runs all of the queued processes from the while loop above.
        'finished' => 'impport_import_finished', // Function to run when the import is successful
        'error_message' => t('The installation has encountered an error.'),
        'progress_message' => t('Imported @current of @total products.'),
      );
      batch_set($batch);
      fclose($handle);    
    }
  }
  else {
    drupal_set_message(t('There was an error uploading your file. Please contact a System administator.'), 'error');
  }
}



/**
 * This function runs the batch processing and creates nodes with then given information
 * @see
 * module_name_import_form_submit()
 */
function impport_import_batch_processing($data) {
	
  // Lets make the variables more readable.
  $file_directorie='C:\Users\amine\Downloads';
  $nom = $data[0];
  $field_valeur = $data[1];
  $field_ref = $data[2];
  $pictuure=$data[3];
  // Find out if the node already exists by looking up its serial number. Each serial number should be unique. You can use whatever you want.
  $nid = db_query("SELECT DISTINCT n.nid FROM {node} n " . 
    "INNER JOIN {field_data_field_ref} s ON s.revision_id = n.vid AND s.entity_id = n.nid " .
    "WHERE field_ref_value = :serial", array(
      ':serial' => $field_ref,
    ))->fetchField();
  if(!empty($nid)) {
    // The node exists! Load it.
	 global $user;
    $node = node_load($nid);
 
    // Change the values. No need to update the serial number though.
    $node->title = $nom;
    $node->field_valeur['und'][0]['value'] = $field_valeur;
    $node->field_valeur['und'][0]['safe_value'] = check_plain($field_valeur);
	
	//$file_name='Koala.jpg';
	
	$file_temp = file_get_contents($file_directorie.'\\'.$pictuure);

	// Saves a file to the specified destination and creates a database entry.
	$file_temp = file_save_data($file_temp, 'private://access/picture/' . $pictuure, FILE_EXISTS_RENAME);

	$node->field_pic = array(
	  'und' => array(
		0 => array(
		  'fid' => $file_temp->fid,
		  'filename' => $file_temp->filename,
		  'filemime' => $file_temp->filemime,
		  'uid' => $user->uid,
		  'uri' => $file_temp->uri,
		  'status' => 1,
		  'display' => 1
		)
	  )
	);
	

	
	
	
    node_save($node);
  }
  else {
    // The node does not exist! Create it.
    global $user;
    $node = new StdClass();
    $node->type = 'accessoire'; // Choose your type
    $node->status = 1; // Sets to published automatically, 0 will be unpublished
    $node->title = $nom;
    $node->uid = $user->uid;		
    $node->field_valeur['und'][0]['value'] = $field_valeur;
    $node->field_valeur['und'][0]['safe_value'] = check_plain($field_valeur);
    $node->language = 'und';
    
    $node->field_ref['und'][0]['value'] = $field_ref;
    $node->field_ref['und'][0]['safe_value'] = check_plain($field_ref);
	
	
	//$file_name='Koala.jpg';
    $file_temp = file_get_contents($file_directorie.'\\'.$pictuure);

	// Saves a file to the specified destination and creates a database entry.
	$file_temp = file_save_data($file_temp, 'private://access/picture/' . $pictuure, FILE_EXISTS_RENAME);

	$node->field_pic = array(
	  'und' => array(
		0 => array(
		  'fid' => $file_temp->fid,
		  'filename' => $file_temp->filename,
		  'filemime' => $file_temp->filemime,
		  'uid' => $user->uid,
		  'uri' => $file_temp->uri,
		  'status' => 1,
		  'display' => 1
		)
	  )
	);
	
	
    node_save($node);
  }
}


function impport_import_finished() {
  drupal_set_message(t('Import Completed Successfully'));
}

?>